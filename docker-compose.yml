version: '3'

services:
  
  ## Infrastructure
  mongo:
    image: mongo:6.0.3
    container_name: mongo
    restart: always
    ports:
      - 27017:27017
    volumes:
      - mongo:/data/db
    networks:
      - servicesNetwork
  apollo-router:
    image: ghcr.io/apollographql/router:v1.13.0
    container_name: apollo-router
    restart: always
    depends_on:
      - stores
    environment:
      APOLLO_ROUTER_SUPERGRAPH_PATH: /apolloRouter/schema/supergraph.graphql
      APOLLO_ROUTER_CONFIG_PATH: /apolloRouter/config/router.yml
    volumes:
      - ./apolloRouter/supergraph.graphql:/apolloRouter/schema/supergraph.graphql
      - ./apolloRouter/router.yml:/apolloRouter/config/router.yml
    ports:
      - 4000:4000
    networks:
      - servicesNetwork
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - servicesNetwork
  kafka:
    image: 'bitnami/kafka:latest'
    container_name: 'kafka'
    ports:
      - '9092:9092'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    networks:
      - servicesNetwork
  
  ## Microservices
  stores:
    container_name: stores
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_CONTEXT=stores
    environment:
      MONGO_URL: mongodb://mongo:27017
      NODE_ENV: production
      SERVICE_NAME: stores
    depends_on:
      - mongo
    networks:
      - servicesNetwork
    restart: always
  products:
    container_name: products
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_CONTEXT=products
    environment:
      MONGO_URL: mongodb://mongo:27017
      NODE_ENV: production
      SERVICE_NAME: products
    depends_on:
      - mongo
    networks:
      - servicesNetwork
    restart: always
  orders:
    container_name: orders
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_CONTEXT=orders
    environment:
      MONGO_URL: mongodb://mongo:27017
      NODE_ENV: production
      SERVICE_NAME: orders
    depends_on:
      - mongo
    networks:
      - servicesNetwork
    restart: always

## Docker-compose configuration
networks:
  servicesNetwork:
    driver: bridge
    
volumes:
  mongo:
    driver: local
