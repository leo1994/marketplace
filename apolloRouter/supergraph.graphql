schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.2", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__field(graph: join__Graph!, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

input CreateStoreInput
  @join__type(graph: STORES_SERVICE)
{
  name: String!
  fee: Float!
}

scalar join__FieldSet

enum join__Graph {
  PRODUCTS_SERVICE @join__graph(name: "products-service", url: "http://products:4000")
  STORES_SERVICE @join__graph(name: "stores-service", url: "http://stores:4000")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Mutation
  @join__type(graph: PRODUCTS_SERVICE)
  @join__type(graph: STORES_SERVICE)
{
  createProduct(name: String!, price: Float!, storeId: String!): Product @join__field(graph: PRODUCTS_SERVICE)
  updateProduct(id: ID!, name: String, price: Float!): Product @join__field(graph: PRODUCTS_SERVICE)
  deleteProduct(id: ID!): Boolean @join__field(graph: PRODUCTS_SERVICE)
  createStore(name: String!, fee: Float!): Store @join__field(graph: STORES_SERVICE)
  updateStore(id: ID!, name: String, fee: Float): Store @join__field(graph: STORES_SERVICE)
}

type Product
  @join__type(graph: PRODUCTS_SERVICE, key: "id")
{
  id: ID!
  name: String
  price: Float
  store: Store
}

type Query
  @join__type(graph: PRODUCTS_SERVICE)
  @join__type(graph: STORES_SERVICE)
{
  product(id: ID!): Product @join__field(graph: PRODUCTS_SERVICE)
  products(storeId: ID!): [Product] @join__field(graph: PRODUCTS_SERVICE)
  store(id: ID!): Store @join__field(graph: STORES_SERVICE)
  stores: [Store] @join__field(graph: STORES_SERVICE)
}

type Store
  @join__type(graph: PRODUCTS_SERVICE, key: "id")
  @join__type(graph: STORES_SERVICE, key: "id")
{
  id: ID!
  products: [Product] @join__field(graph: PRODUCTS_SERVICE)
  name: String @join__field(graph: STORES_SERVICE)
  fee: Float @join__field(graph: STORES_SERVICE)
}